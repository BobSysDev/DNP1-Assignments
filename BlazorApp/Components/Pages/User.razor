@page "/User"
@using System.Security.Claims
@using BlazorApp.Components.Auth
@using BlazorApp.Services
@using DTOs
@attribute [StreamRendering]
@inject IUserService UserService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<h3 class="text-primary mb-4">User Management</h3>

<AuthorizeView>
    <NotAuthorized>
        @if (testResultMessage != null)
        {
            <div class="alert @testResultCss" role="alert">
                @testResultMessage
            </div>
        }

        <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <input type="text" id="username" @bind="@username" class="form-control" placeholder="Enter username"/>
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" id="password" @bind="@password" class="form-control" placeholder="Enter password"/>
        </div>

        <div class="d-flex justify-content-start gap-2 mb-3">
            <button class="btn btn-outline-primary" @onclick="AddUser">Add User</button>
            <button class="btn btn-outline-secondary" @onclick="ViewAllUsers">View All Users</button>
        </div>

        @if (users != null && users.Count > 0)
        {
            <h4 class="mt-4">All Users</h4>
            <ul class="list-group">
                @foreach (var user in users)
                {
                    <li class="list-group-item">@user.Username (ID: @user.Id)</li>
                }
            </ul>
        }

    </NotAuthorized>

    <Authorized>
        @if (isEditing)
        {
            <div class="card-header">
                <h4>Edit User</h4>
            </div>
            <div class="card-body">
                
                <EditForm Model="editDto" OnValidSubmit="HandleValidSubmit" Context="formContext">

                    <div class="mb-3">
                        <label for="username" class="form-label">Username:</label>
                        <InputText class="form-control" type="text" id="username" @bind-Value="editDto.Username" placeholder="Enter new username"/>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password:</label>
                        <InputText type="password" id="password" class="form-control" @bind-Value="editDto.Password" placeholder="Enter new password"/>
                        <p>Warning: type your current password here if you don't want to edit it, as due to implementation limitations, this will always <b>OVERRIDE</b> your current password</p>
                    </div>

                    <div class="d-flex justify-content-start">
                        <button type="submit" class="btn btn-outline-primary">Confirm</button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="CancelEdit">Cancel</button>
                    </div>

                </EditForm>
            </div>
        }

        else
        {
            <button class="btn btn-primary mt-4" @onclick="ShowEditingForm">Edit</button>
            <button class="btn btn-secondary mt-4" @onclick="DeleteUser">Delete</button>
        }


    </Authorized>

</AuthorizeView>

@code {
    private string username;
    private string password;
    private string? testResultMessage;
    private string testResultCss = "alert-secondary";
    private List<PublicUserDTO> users = new();
    
    private UserDTO editDto { get; set; } = new UserDTO();
    private bool isEditing = false;

    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private string? loggedInUserName;
    private int loggedInUserId;


    protected override async Task OnInitializedAsync()
    {
        await RefreshAuthCredentials();
    }
    
    private async Task RefreshAuthCredentials()
    {
        Console.WriteLine("Refreshing auth creds");
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            return;
        }

        IEnumerable<Claim> claims = claimsPrincipal.Claims;
        string userIdAsString = claims.Single(c => c.Type == ClaimTypes.NameIdentifier).Value;
        loggedInUserId = int.Parse(userIdAsString);
        loggedInUserName = claims.Single(c => c.Type == ClaimTypes.Name).Value;

    }

    private async Task AddUser()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            testResultMessage = "Username and password are required.";
            testResultCss = "alert-danger";
            return;
        }

        var sampleUser = new CreateUserDTO
        {
            Username = username,
            Password = password
        };

        try
        {
            var addedUser = await UserService.AddUserAsync(sampleUser);
            testResultMessage = $"Success! User '{addedUser.Username}' added with ID {addedUser.Id}.";
            testResultCss = "alert-success";

            username = string.Empty;
            password = string.Empty;
        }
        catch (Exception ex)
        {
            testResultMessage = $"Failed! Error: {ex.Message}";
            testResultCss = "alert-danger";
        }
    }

    private async Task ViewAllUsers()
    {
        try
        {
            users = await UserService.GetAll();
            testResultMessage = $"{users.Count} user(s) retrieved successfully.";
            testResultCss = "alert-success";
        }
        catch (Exception ex)
        {
            testResultMessage = $"Failed to retrieve users. Error: {ex.Message}";
            testResultCss = "alert-danger";
        }
    }

    
    
    private void HandleValidSubmit()
    {
        editDto.Id = loggedInUserId;
        UserService.UpdateUser(editDto);
        
        isEditing = false;
    }
    
    private void ShowEditingForm()
    {
        isEditing = true;
        editDto.Username = loggedInUserName;
        editDto.Id = loggedInUserId;
    }
    
    private void CancelEdit()
    {
        isEditing = false;
    }

    private async Task DeleteUser()
    {
        await UserService.DeleteUser(loggedInUserId);
        await ((SimpleAuthProvider)AuthProvider).Logout();
        NavigationManager.NavigateTo("/");
    }

}
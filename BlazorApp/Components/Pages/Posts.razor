@page "/Posts"
@using BlazorApp.Services
@using Entities
@inject IPostService PostService

<div class="container mt-4">
    <h3 class="text-center">Posts</h3>

    @if (isCreating)
    {
        <div class="card mt-4">
            <div class="card-header">
                <h4>Create New Post</h4>
            </div>
            <div class="card-body">
                <EditForm Model="newPost" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="mb-3">
                        <label class="form-label">Title:</label>
                        <InputText class="form-control" @bind-Value="newPost.Title"/>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Content:</label>
                        <InputTextArea class="form-control" @bind-Value="newPost.Body"/>
                    </div>
                    <button type="submit" class="btn btn-primary">Create</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelCreate">Cancel</button>
                </EditForm>
            </div>
        </div>
    }
    else if (selectedPost != null)
    {
        <div class="card mt-4">
            <div class="card-header">
                <h4>@selectedPost.Title</h4>
            </div>
            <div class="card-body">
                <p>@selectedPost.Body</p>
                <button class="btn btn-secondary" @onclick="BackToList">Back to List</button>
            </div>
        </div>
    }
    else
    {
        <button class="btn btn-primary mt-4" @onclick="ShowCreateForm">Create New Post</button>
        @if (posts == null)
        {
            <p class="mt-4">
                <em>Loading...</em>
            </p>
        }
        else if (!posts.Any())
        {
            <p class="mt-4">No posts available.</p>
        }
        else
        {
            <ul class="list-group mt-4">
                @foreach (var post in posts)
                {
                    <li class="list-group-item">
                        <a href="#" @onclick="() => ShowPostDetails(post.PostId)">@post.Title</a>
                    </li>
                }
            </ul>
        }
    }
</div>

@code {
    private IEnumerable<Post> posts;
    private Post newPost = new Post();
    private Post selectedPost;
    private bool isCreating = false;

    protected override async Task OnInitializedAsync()
    {
        posts = await PostService.GetAllPostsAsync();
    }

    private async Task HandleValidSubmit()
    {
        await PostService.AddPostAsync(newPost);
        newPost = new Post();
        posts = await PostService.GetAllPostsAsync();
        isCreating = false;
    }

    private void ShowCreateForm()
    {
        isCreating = true;
    }

    private void CancelCreate()
    {
        isCreating = false;
    }

    private async Task ShowPostDetails(string postId)
    {
        selectedPost = await PostService.GetPostByIdAsync(postId);
    }

    private void BackToList()
    {
        selectedPost = null;
    }

}
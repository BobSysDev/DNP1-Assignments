@using System.Security.Claims
@using BlazorApp.Components.Auth
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <span>Hi @loggedInUserName! | </span>
                    <button @onclick="Logout">Log out</button>
                </Authorized>
                <NotAuthorized>
                    @if (!NavigationManager.Uri.Contains("Login"))
                    {
                        Console.WriteLine(NavigationManager.Uri);
                        <button @onclick="Login">Log in</button>
                    }
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private string loggedInUserName;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await RefreshAuthCredentials();
    }

    private async Task RefreshAuthCredentials()
    {
        Console.WriteLine("Refreshing auth creds");
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            return;
        }

        IEnumerable<Claim> claims = claimsPrincipal.Claims;
        loggedInUserName = claims.Single(c => c.Type == ClaimTypes.Name).Value;
    }

    private void Login()
    {
        NavigationManager.NavigateTo("/Login");
    }

    private async Task Logout()
    {
        await ((SimpleAuthProvider)AuthProvider).Logout();
        StateHasChanged();
    }
}
